@namespace Flatify
@using Flatify.Utilities
@inherits FlatItemsControlBase<DropdownItem>

<div class="@ContainerClass">
	<!-- a button to toggle show/hide of dropdown -->
	<FlatButton Class="@ButtonClass" Color="@Color" Variant="@Variant">
		@MenuLabel
	</FlatButton>
	<!-- dropdown: in this case a menu -->
	<ul class="@ListClass">
		<li class="menu-item heading">@MenuHeadingLabel</li>
		@foreach (var item in Items)
		{
			<li class="menu-item">
				@if (!string.IsNullOrWhiteSpace(item.Link))
				{
					<a href="@item.Link">
						<FlatTypo Text="@item.Title" />
					</a>
				}
				else
				{
					<FlatTypo Text="@item.Title" />
				}
			</li>
		}
		<!-- dropdown arrow which is optional -->
		<li aria-hidden="true">
			<span class="pointer-arrow"></span>
		</li>
	</ul>
</div>

@code {
	protected string ContainerClass => new CssBuilder()
	                                   .AddClass("dropdown-wrapper")
	                                   .AddClass($"{Size.ToDescriptionString()}")
	                                   .Build();
	protected string ListClass => new CssBuilder()
	                              .AddClass("dropdown")
	                              .AddClass("menu-items-wrapper")
	                              .AddClass($"style-{Color.ToDescriptionString()}", Color != FlatColor.Default && Color != FlatColor.Transparent && Color != FlatColor.Inherit)
	                              .Build();
	protected string ButtonClass => new CssBuilder()
	                                .AddClass("dropdown-toggle")
	                                .AddClass("arrow-button")
	                                .Build();
	[Parameter] public ElementSize Size { get; set; } = ElementSize.Medium;
	[Parameter] public FlatColor Color { get; set; } = FlatColor.Default;
	[Parameter] public Variant Variant { get; set; } = Variant.Default;
	[Parameter] public string MenuLabel { get; set; } = "";
	[Parameter] public string MenuHeadingLabel { get; set; } = "";
}